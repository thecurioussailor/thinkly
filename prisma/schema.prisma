// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String?
  name          String?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  accounts      Account[]
  blogs         Blog[]
  session       Session[]
  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}
model Blog {
  id          String      @id @default(uuid())
  title       String
  slug        String      @unique @default(cuid())
  content     String
  excerpt     String?
  imageUrl    String?
  published   Boolean     @default(false)
  views       Int         @default(0)
  authorId    String
  author      User        @relation(fields: [authorId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categories  Category[]  @relation("BlogCategory") //many to many relation
  tags        Tag[]       @relation("BlogTag")
  @@map("blogs")
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  slug        String      @unique @default(cuid())
  blogs       Blog[]      @relation("BlogCategory")
  @@map("categories")
}

model Tag {
  id          String      @id @default(uuid())
  name        String      @unique
  slug        String      @unique @default(cuid())
  blogs       Blog[]      @relation("BlogTag")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("tags")
}